<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/04/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>以太坊支持RPC模式,以太坊账户开启这种模式后，就可以自动化完成某些操作，比如矿池挖出币之后自动向钱包转账。攻击者主要利用RPC开放端口,所以只要限制RPC端口就可以做到防护。</p><p>回到顶部<br>一、主要攻击手段分析：<br>1.批量扫描8545端口或18545端口等常用开放RPC端口<br>2.当扫描到开放的端口之后,使用 eth.getBlockByNumber（查询区块高度）、eth.accounts（查询钱包地址）、eth.getBalance（查询钱包余额）三个命令来做相应动作。<br>3.不断尝试发送 eth.sendTransaction 命令，该命令如果生效，则会把钱包中的余额转移到攻击者的钱包.有人会问，转账需要密钥参与，黑客是怎么绕开密钥呢？<br>原来，以太坊账户支持unlockAccount命令，这个命令是为了方便某些机械化交易提供的。在代币交易中，有些人使用电脑进行高频交易，以此来获取波动价差（股票高频交易也是这么做，有时候一分钟来回买卖几十次）。<br>以太坊在高频交易中(或者矿池自动转账)可以设置一段时间内无需输入密码，时间长短由用户自己指定。如果黑客正好在这段时间之内发来了“余额转移”的指令，以太坊账户（钱包或web账户）就会自动执行该操作，将钱包里的以太坊转到黑客钱包中。</p><p>我曾在自己的以太坊私链及公链中都被攻击，希望可以引起大家的重视。</p><p>回到顶部<br>二、用户应该如何防止此类攻击？<br>2.1 端口限制<br>1、更改默认的 RPC API 端口，配置方法如：–rpcport 18545 或 –wsport 18546 ；如果使用的是docker容器的方式部署的节点，可在容器启动映射端口时，修改端口（让端口扫描无法生效）<br>2、更改 RPC API 监听地址为固定的IP地址或者网段，配置方法如：–rpcaddr 192.168.1.100 或 –wsaddr 192.168.1.100，–rpcaddr 192.168.1.100&#x2F;24 或 –wsaddr 192.168.1.100&#x2F;24<br>注：rpcaddr：HTTP-RPC服务器监听地址 、wsaddr：websocket服务器监听地址</p><p>注：此方法是在以太坊节点处进行IP限制</p><p>3、配置防火墙或安全组 限制对 RPC API 端口的访问，举例：只允许 192.168.1.100 访问 8545 端口（只接受特定IP发来的命令）：<br>iptables -A INPUT -s 192.168.1.101 -p TCP –dport 8545 -j ACCEPT<br>iptables -A INPUT -p TCP –dport 8545 -j DROP<br>或者使用UFW防火墙,UFW或Uncomplicated Firewall是iptables的一个接口，旨在简化配置防火墙的过程,一般在ubuntu系统中使用</p><p>1.安装UFW<br> sudo apt-get install ufw<br>2.设置默认策略<br>sudo ufw default deny incoming<br>sudo ufw default allow outgoing<br>3.允许以太网p2p网络端口<br>我们还将启用以太坊网络，以便我们的节点能够与公共区块链网络进行通信和同步。例如以太坊网络端口是30303<br>sudo ufw allow 30303<br>注：此方法是在部署节点的服务器中进行IP和端口的限制，物理服务器可通过iptables防火墙进行限制，云服务器可通过安全组进行限制</p><p>4.启用RPC端口 我们只允许从我们的可信节点连接到我们的以太坊客户端。以太坊端口的默认RPC端口为8545。<br>sudo ufw allow from <IP addr> to any port 8545<br>例如，如果我的外部服务器IP地址是192.168.1.101，如果你使用的是与8545不同的不同RPC端口，还应该指定相应的端口。</p><p>sudo ufw allow from 192.168.1.101 to any port 8545<br>注：设置以上规则需要启用UFW， sudo ufw enable</p><p>综上所述，建议你配置为：允许所有人可连接到以太坊RPC和网络端口。在防火墙或安全组中确保允许服务器需要的任何其他传入连接，同时限制任何不必要的连接，以便你的服务器功能和安全。</p><p>2.2 私钥安全<br>1.账户信息（keystore）不要存放在节点上 （因为账户不在节点上，所以就不会用到 unlockAccount 了）<br>注：平时账户信息不要存放在节点中，但是如果需要冲洗某个账户的交易，有可能会使用到节点人为操作，这时候务必确保你的节点rpc端口仅信任的IP地址可连接，否则有可能造成账户资金被转移的情况。</p><p>2.任何转账均用 web3 的 sendTransaction 和 sendRawTransaction 发送私钥签名过的 transaction（限制不安全的转账命令）<br>3.私钥物理隔离（如冷钱包、手工抄写）或者高强度加密存储并保障密钥的安全<br>注：私钥的安全配置，除了以上需要几点，还有特别多需要注意的地方，因为本篇文章讲述的是RPC端口的网络安全问题，所以此处不再赘述私钥安全。</p><p>回到顶部<br>三、RPC端口访问加密及访问控制<br>如果geth节点不得不暴露在公网上面，则会面临很多安全风险。一个可能的补救措施是对RPC访问进行加密。通过nginx的HTTP basic Auth(Http基本认证)技术，可以实现更高的安全。</p><p>原理:通过配置nginx的反向代理和加密技术，可以给运行在linux上的应用程序分配一个新的url，访问应用程序就相当于访问这个url。外部用户想访问这个url，必须输入用户名和密码，否则访问会被拒绝。对于geth节点，以前必须对所有用户暴露rpc端口，采用NBHA技术，则给geth分配一个对于的url，需要用户名和密码才能访问geth节点。这个时候，geth节点不必对外开放RPC端口。</p><p>3.1 nginx配置<br>nginx使用docker部署的方法，可参考这篇文章【三分钟教程】docker快速部署nginx服务</p><p>部署好nginx服务以后，再进行以下的操作：</p><p>安装htpasswd工具<br>docker exec -it nginx bash<br>apt-get update<br>apt-get install apache2-utils -y<br>创建认证用户名和密码<br>htpasswd -c &#x2F;etc&#x2F;nginx&#x2F;geth.htpasswd eth  </p><div class="code-wrapper"><pre><code class="hljs">New password:   输入密码Re-type new password: 再次输入密码Adding password for user eth   （已为用户eth添加密码）</code></pre></div><p>3.2 http请求配置<br>将在&#x2F;etc&#x2F;nginx下创建名为geth.htpasswd的密码文件，用户名设置为eth。输入上面命令，会提示用户输入俩次密码。 修改nginx配置，打开文件 &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default文件，将里面的内容修改成这样：</p><p>复制代码<br>server {<br>    listen 80 default_server;<br>    server_name localhost;</p><div class="code-wrapper"><pre><code class="hljs">location / &#123;    try_files $uri $uri/ =404;&#125;location /eth &#123;    auth_basic &quot;Restricted Area&quot;;    auth_basic_user_file /etc/nginx/geth.htpasswd;    proxy_pass http://localhost:8545;  &#125;access_log  /var/log/nginx/localhost.log  main;</code></pre></div><p>}<br>复制代码<br>在这里将服务器的名字设为localhost，geth对应的url为localhost&#x2F;eth，其对应的密码文件通过auth_basic_user_file指令进行制定。</p><p>此时可以用浏览器中访问看什么效果，此时应出现的效果应该是：</p><p>访问：<a href="http://localhost/%EF%BC%8C%E5%87%BA%E7%8E%B0404%E9%A1%B5%E9%9D%A2">http://localhost/，出现404页面</a></p><p>访问：<a href="http://localhost/eth">http://localhost/eth</a> 当输入正确的用户名和密码后点击OK,如果没有出现错误，这说明配置成功。</p><p>到现在为止，已经成功的用nginx为geth构建了一层安全防护，并给geth映射了一个外部访问的url,现在访问geth不必通过http:&#x2F;&#x2F;:的方式，而是直接访问映射的url。如geth attach <a href="http://username:password@ip/eth">http://username:password@ip/eth</a> 所以现在是时候把geth暴露出去的rpc端口采取禁止外部访问的操作了。腾讯云阿里云都有安全组可以实现这个操作。</p><p>curl -H “Content-Type: application&#x2F;json” -X POST –data ‘{“jsonrpc”:”2.0”,”method”:”eth_syncing”,”params”:[],”id”:1}’ <a href="http://eth:123456@lijie.bbef.top/eth">http://eth:123456@lijie.bbef.top/eth</a><br>3.3 安卓机ios访问配置<br>web3j使用的Http模块为OkHttp3，认证需要的用户名和密码信息可以按照OkHttp3添加认证的方式来添加。没使用Http认证时，web3j构建Admin对象的方式是：</p><p>Admin ethClient;<br>ethClient &#x3D; Admin.build(new HttpService(url));</p><p>加入认证用户名和密码的方式：</p><p>复制代码<br>private static OkHttpClient buildBasicAuthClient() {<br>        return new OkHttpClient.Builder().authenticator(new Authenticator() {<br>            @Override<br>            public Request authenticate(Route route, Response response) throws IOException {<br>                String credential &#x3D; okhttp3.Credentials.basic(Define.userName, Define.passwd);<br>                return response.request().newBuilder().header(“Authorization”, credential).build();<br>            }<br>        }).build();<br> }</p><p>Admin ethClient;<br>ethClient &#x3D; Admin.build(new HttpService(url,buildBasicAuthClient(),false));<br>复制代码<br>3.4 nginx 跨域配置<br>OK，现在可以用Web3j访问加入了Http认证保护的geth节点了。<br>上面适合安卓客户端,而ios端调用web3.js来访问Http Basic Authentication保护资源的问题<br>ios客户端访问geth的方式跟安卓端不一样。由于没有开源成熟的OC语言的类似于web3j的库，ios端只有通过webview的方式建立一个Html页面，在页面里通过js来调用web3.js的API函数来访问geth。在浏览器里面访问有Http Basic Authentication的geth节点，会报错,这是浏览器在报js跨域访问的问题。一番谷歌后仿照网上解决CROS的方法，通过添加配置nginx的配置文件添加，最终的配置：</p><p>复制代码<br>server {<br>    listen 80 default_server;<br>    server_name localhost;</p><div class="code-wrapper"><pre><code class="hljs">location / &#123;    try_files $uri $uri/ =404;&#125;location /eth &#123;    auth_basic &quot;Restricted Area&quot;;    auth_basic_user_file /etc/nginx/geth.htpasswd;    proxy_pass http://localhost:8545;    if ($request_method = &#39;OPTIONS&#39;) &#123;    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;    add_header &#39;Access-Control-Allow-Headers&#39;         &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Auth        orization&#39;;        add_header &#39;Access-Control-Max-Age&#39; 1728000;    add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;;    add_header &#39;Content-Length&#39; 0;    return 204;      &#125; &#125;access_log  /var/log/nginx/localhost.log  main;</code></pre></div><p>}<br>复制代码<br>3.5 nginx https 配置<br>当然除了HTTP基本认证还可以配置带证书保护的Https，这个更安全。<br>Http协议的传输过程是明文，因此使用HTTP协议传输隐私信息非常不安全。HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。它能够对传输内容进行加密。HTTPS需要申请一个CA证书，阿里云上面可以申请免费的Symantec证书。阿里云证书需要先有一个可用的域名，该域名映射到节点的ip。申请证书后再下载到节点中，然后在nginx的配置文件中进行配置。</p><p>nginx配置HTTPS，具体配置方法如下：</p><p>复制代码<br>server{<br>    listen 443 ssl;<br>    server_name localhost;<br>    charset utf-8;<br>    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;xxx.pem;<br>    ssl_certificate_key  &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;xxx.key;<br>    ssl_session_timeout 5m;<br>    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;<br>    ssl_prefer_server_ciphers on;<br>    location &#x2F; {<br>        try_files $uri $uri&#x2F; &#x3D;404;<br>    }</p><div class="code-wrapper"><pre><code class="hljs">location /eth &#123;    auth_basic &quot;Restricted Area&quot;;    auth_basic_user_file /etc/nginx/geth.htpasswd;    proxy_pass http://localhost:8545;    if ($request_method = &#39;OPTIONS&#39;) &#123;    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;    add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;    add_header &#39;Access-Control-Max-Age&#39; 1728000;    add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;;    add_header &#39;Content-Length&#39; 0;    return 204;    &#125; &#125;  access_log  /var/log/nginx/localhost.log  main;</code></pre></div><p>}<br>复制代码<br>重启nginx服务既可以使用https了</p><p>3.6 nginx 访问控制配置<br>在某些时候，我们可能还需要仅允许部分IP可以访问。当然，这个需求，其实在阿里云或腾讯云的安全组上就可以实现，或者使用服务器的iptables防火墙也是可以的。下面这种方法是利用nginx中访问控制的功能进行实现的。nginx配置如下：</p><p>复制代码<br>server{<br>    listen 443 ssl;<br>    server_name localhost;<br>    charset utf-8;<br>    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;xxx.pem;<br>    ssl_certificate_key  &#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;xxx.key;<br>    ssl_session_timeout 5m;<br>    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;<br>    ssl_prefer_server_ciphers on;<br>    location &#x2F; {<br>        try_files $uri $uri&#x2F; &#x3D;404;<br>    }</p><div class="code-wrapper"><pre><code class="hljs">location /eth &#123;    auth_basic &quot;Restricted Area&quot;;    auth_basic_user_file /etc/nginx/geth.htpasswd;    proxy_pass http://localhost:8545;    if ($request_method = &#39;OPTIONS&#39;) &#123;    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;    add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;    add_header &#39;Access-Control-Max-Age&#39; 1728000;    add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;;    add_header &#39;Content-Length&#39; 0;    return 204;    &#125;   #####限制仅部分IP访问##############   allow 49.7.66.132;   allow 124.65.8.139;   deny all;   ######限制仅部分IP访问############## &#125;  access_log  /var/log/nginx/localhost.log  main;</code></pre></div><p>}<br>复制代码<br>例如以上配置，出现在allow中的IP是可以访问的，未出现在allow中的IP访问 <a href="https://localhost/eth">https://localhost/eth</a> 时，会出现403拒绝访问的状态码。</p><hr>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BTC���������Ѽ���</title>
    <link href="/2022/04/07/BTC%E4%BA%A4%E6%98%93%E6%89%8B%E7%BB%AD%E8%B4%B9%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/04/07/BTC%E4%BA%A4%E6%98%93%E6%89%8B%E7%BB%AD%E8%B4%B9%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/cljdsc/article/details/113851809">https://blog.csdn.net/cljdsc/article/details/113851809</a></p>]]></content>
    
    
    <categories>
      
      <category>������</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ת��</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
